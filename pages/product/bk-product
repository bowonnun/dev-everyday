import React, { Component } from 'react';
import Page from '../../layouts/main'
import client from '../../components/Apollo/apolloClient'
import { withTranslation } from '../../i18n'
import gql from 'graphql-tag'
import Link from "next/link";
import { getWoocomData } from '../../services/WooService'
import { id } from 'date-fns/locale';
const PRODUCTS_QUERY = gql`query{
    productCategory(id: "cHJvZHVjdF9jYXQ6MjEz") {
    id
    name
    products(first: 99, where: {orderby: {order: ASC, field: MENU_ORDER}}) {
      nodes {
        id
        name
        slug
        menuOrder
        onSale
        ... on VariableProduct {
          id
          name
          shortDescription
          price
          image {
            sourceUrl
            slug
          }
        }
        ... on SimpleProduct {
          id
          name
          shortDescription
          price
          image {
            sourceUrl
            slug
          }
        }
        productCategories(where: {search: ""}) {
            nodes {
              name
              id
              databaseId
              slug
            }
        }
      }
    }
  }
}`;
const PRODUCTSCAT_QUERY = gql`query{
    productCategories {
        nodes {
            name
            slug
            id
            databaseId
            children {
            nodes {
                name
                slug
                id
                databaseId
                children {
                nodes {
                    name
                    id
                    databaseId
                    slug
                }
                }
            }
            }
        }
    }
}`;
/**
 * Index
 * 
 * 
 */
class Product extends Component {
    constructor(props) {
        super(props)
        this.state = {
            item: this.props.products,
            isMounted: false,
            fillter_DD: '',
            menuOrder: [],
            catOrder: [],
        }
    }

    contains = (target, pattern) => {
        var value = 0;
        pattern.forEach(function (word) {
            value = value + target.includes(word);
        });
        return (value < 1)
    }
    // contains = (target, pattern) => {
    //     // var value = 0;
    //     // pattern.forEach(function (word) {
    //     //   value = value + target.includes(word);
    //     // });
    //     return target.includes(pattern)
    // }
    myFunction1 = async (e, i) => {

        if (e.target.checked) {
            let catOrder = [...this.state.catOrder]
            if (catOrder[0] == 43) {
                let catOrder = []
            }
            let menuOrders = [...this.state.menuOrder]

            let item = []
            await menuOrders.push(i)
            // this.setState({menuOrder:menuOrders.sort(function(a, b){return a-b})})
            await catOrder.push(e.target.value)

            this.setState({ menuOrder: menuOrders, catOrder: catOrder })
            this.props.products.map((items, i) => {
                if (this.contains(items.CategoryID.toString(), catOrder) == true) {
                    item.push(items)
                }
            })
            this.setState({ item: item })

        } else {
            let menuOrders = [...this.state.menuOrder]
            let catOrder = [...this.state.catOrder]
            let nons = menuOrders.indexOf(i)
            let cat = catOrder.indexOf(e.target.value)
            let item = []
            if (nons > -1) {
                await menuOrders.splice(nons, 1)
                this.setState({ menuOrder: menuOrders })
            }
            if (cat > -1) {
                await catOrder.splice(cat, 1)
                this.setState({ catOrder: catOrder })
            }
            if (this.state.catOrder.length == 0) {
                console.log('sss')
                this.setState({ item: this.props.products })
            } else {
                this.props.products.map((items, i) => {
                    if (this.contains(items.CategoryID.toString(), catOrder) == true) {
                        item.push(items)
                    }
                })
                this.setState({ item: item })
            }
        }
        console.log(this.state.catOrder)
    }

    Active_Fillter() {
        this.state.fillter_DD == '' ? this.setState({ fillter_DD: 'active' }) : this.setState({ fillter_DD: '' })
    }
    parseHtmlEntities(str) {
        return str.replace(/&#([0-9]{1,3});/gi, function (match, numStr) {
            var num = parseInt(numStr, 10); // read num as normal number
            return String.fromCharCode(num);
        });
    }
    strip_tags(input, allowed) {
        allowed = (
            ((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []
        ).join("");
        const tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi;
        return input.replace(tags, ($0, $1) =>
            allowed.indexOf("<" + $1.toLowerCase() + ">") > -1 ? $0 : ""
        );
    }
    componentDidMount() {
        this.state.item.map(async (item, i) => {
            let catArray = []
            await item.productCategories.nodes.map((cat, i) => {
                catArray.push(cat.databaseId)
            })
            this.state.item[i].CategoryID = catArray
        })
        this.setState({ lang: this.props.i18n.language, isMounted: true })
    }
    GroupCategory = async (id, i) => {
        // let menuOrders = [...this.state.menuOrder]
        // let catOrder = [...this.state.catOrder]
        let menuOrders = []
        let catOrder = []
        let item = []

        // this.setState({menuOrder:menuOrders.sort(function(a, b){return a-b})})

        await catOrder.push(id)
        var inputs = document.querySelectorAll('.groupCheckbox input');
        for (var i = 0; i < inputs.length; i++) {
            inputs[i].checked = false;
        }
        this.setState({ menuOrder: [], catOrder: catOrder })
        this.props.products.map((items, i) => {
            if (this.contains(items.CategoryID.toString(), catOrder) == true) {
                item.push(items)
            }
        })
        this.setState({ item: item })
        console.log(item)
    }

    Sortby = async (e) => {
        const { name, value } = e.target
        console.log(name + ' ' + value)
    }
    render() {
        const { item ,menuOrders} = this.state
        const allcategory = this.props.allcategory
        
        return (
            <Page title="Products" description="จุดมุ่งหมายของแบรนด์ Karmakamet ในปีนี้เรามุ้งเน้นที่จะพูดเรื่อง “Life Remedy” คือการใช้ชีวิตอันแสนรื่นรมณ์ในแบบฉบับของ Karmakamet Aromatic" images="/static/images/icon-logo/LOGO_circle.png" keywords="เครื่องหอม น้ำมันหอม จุดมุ่งหมายของแบรนด์ Karmakamet " >
                <div className='allProduct-Page pdtop-site' >
                    <div className='allProduct_wrapper'>

                        <section className='sec-groupFillter'>
                            <div className='btn_groupFillter' onClick={() => this.Active_Fillter()}>
                                <p>Fillter</p>
                                <i class="fa fa-angle-down" aria-hidden="true"></i>
                            </div>
                            <div className={'groupFillter_wrapper ' + this.state.fillter_DD}>
                                {
                                    allcategory.map((item, index_1) => {
                                        return (
                                            <div className='groupFillter'>
                                                <p className='fillter-title' onClick={() => this.GroupCategory(item.databaseId, index_1)}>{item.name}</p>
                                                <div className='groupFillter_inner'>
                                                    {item.children.nodes.map((fillterItem, index_2) => {
                                                        return (
                                                            <div className='gorupfillter-item'>
                                                                <label className="fillter-item" for={`checkbox-${index_2}`} >
                                                                    <div className='groupCheckbox'>
                                                                        <input type="checkbox" id={`checkbox-${index_2}`} value={fillterItem.databaseId} onChange={(e) => this.myFunction1(e, index_2)} />
                                                                        <span className='checkmark' />
                                                                    </div>
                                                                    <p
                                                                        className='fillterName'
                                                                        dangerouslySetInnerHTML={{
                                                                            __html: this.strip_tags(
                                                                                fillterItem.name,
                                                                                "<p>"
                                                                            ),
                                                                        }}
                                                                    />
                                                                </label>
                                                                <div className='GroupChild-fillter'>
                                                                    {
                                                                        fillterItem.children.nodes.map((index, i) => {
                                                                            if (this.state.menuOrder.includes(index_2))
                                                                                return (
                                                                                    <label className="fillter-item" for={`Child_${index_2}_checkbox-${i}`} >
                                                                                        <div className='groupCheckbox'>
                                                                                            <input type="radio" id={`Child_${index_2}_checkbox-${i}`} name="sub-catagory" value={index.databaseId} onChange={(e) => this.myFunction1(e, index_2)} />
                                                                                            <span className='checkmark' />
                                                                                        </div>
                                                                                        <p
                                                                                            className='fillterName'
                                                                                            dangerouslySetInnerHTML={{
                                                                                                __html: this.strip_tags(
                                                                                                    index.name,
                                                                                                    "<p>"
                                                                                                ),
                                                                                            }}
                                                                                        />
                                                                                    </label>
                                                                                )
                                                                        })
                                                                    }
                                                                </div>
                                                            </div>

                                                        )
                                                    })}
                                                </div>
                                            </div>
                                        )
                                    })
                                }




                            </div>
                        </section>
                        <section className='sec-groupProduct'>
                            <div className='groupSortby'>
                                <div className='groupSortby_wrapper'>
                                    <select class="Sortby-item form-control" name="Sortby-item1" onChange={this.Sortby} >
                                        <option>Sort by</option>
                                        <option value="Low">Low Price</option>
                                        <option value="High">High Price</option>
                                        <option value="A">A - Z</option>
                                        <option value="Z">Z - A</option>
                                    </select>
                                </div>
                            </div>


                            <div className='groupProduct_inner'>
                                {
                                    this.state.isMounted ?
                                        item.map((data, i) => {
                                            return (
                                                <Link href="/product/[slug]" as={`/product/${data.slug}`} passHref key={i}>
                                                    <a className='ProductItem' href=''>

                                                        <div className='Product-pic'>
                                                            {
                                                                data.CategoryID != undefined ?
                                                                    data.CategoryID.includes(85) ?
                                                                        <div className="Product-tag">
                                                                            <div className="Product-tag_item" >{data.CategoryID}</div>
                                                                        </div>
                                                                        :
                                                                        '' : ''
                                                            }

                                                            {
                                                                data.image != null && <img src={data.image.sourceUrl} />
                                                            }
                                                        </div>

                                                        <div className="Product-detail">
                                                            <h3 className='Product-name'>{data.name}</h3>
                                                            <div className="Product-pricegroup">
                                                                <p>{data.price}</p>
                                                            </div>
                                                        </div>

                                                    </a>
                                                </Link>
                                            )
                                        })
                                        :
                                        'ไม่พบข้อมูลสินค้า'
                                }
                            </div>
                        </section>
                    </div>

                </div>

                {/* 
                <div className="pdtype-page pdtop-site">
                    <div className="pdtype-page-wrapper">

                        <div className="intro-title">
                            <div className="intro-title_wrapper">
                                <h1>ALL PRODUCTS</h1>
                            </div>
                        </div>
                        <div className="pdtype-group">
                            <div className="pdtype-wrapper">
                                {
                                    this.state.isMounted ?
                                        item.map((data, i) => {
                                            return (
                                                <Link href="/product/[slug]" as={`/product/${data.slug}`} passHref key={i}>
                                                    <div className="pdtype-item" >
                                                        <div className="pdtype-img">
                                                            <div className="promotion-tag">
                                                                {
                                                                    data.onSale !== false ? data.on_sale !== false ? <div className="promotion-tag_item" style={{ backgroundColor: "#ab0000" }}>DISCOUNT</div> : '' : ''
                                                                }

                                                            </div>
                                                            {
                                                                data.image != null && <div className="pdtype-img_inner" style={{ backgroundImage: "url(" + data.image.sourceUrl + ")" }}></div>
                                                            }

                                                        </div>
                                                        <div className="pdtype-detail">
                                                            <h3>{data.name}</h3>
                                                            <div className="price-group">
                                                                <p>{data.price}</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </Link>
                                            )
                                        })
                                        :
                                        'ไม่พบข้อมูลสินค้า'
                                }

                            </div>
                        </div>
                       
                    </div>
                </div> */}

            </Page>
        )
    }
}
Product.getInitialProps = async (ctx) => {
    const result = await client.query({ query: PRODUCTS_QUERY, fetchPolicy: 'no-cache', });
    const cat = await client.query({ query: PRODUCTSCAT_QUERY, fetchPolicy: 'no-cache', });
    return {
        categoryname: result.data.productCategory.name,
        products: result.data.productCategory.products.nodes,
        allcategory: cat.data.productCategories.nodes
    }
}
export default withTranslation('layout')(Product);